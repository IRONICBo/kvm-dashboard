// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.3
// source: machine_info.proto

package info

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MachineInfoClient is the client API for MachineInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachineInfoClient interface {
	GetMachineInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetMachineInfoResponse, error)
}

type machineInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineInfoClient(cc grpc.ClientConnInterface) MachineInfoClient {
	return &machineInfoClient{cc}
}

func (c *machineInfoClient) GetMachineInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetMachineInfoResponse, error) {
	out := new(GetMachineInfoResponse)
	err := c.cc.Invoke(ctx, "/info.MachineInfo/GetMachineInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineInfoServer is the server API for MachineInfo service.
// All implementations must embed UnimplementedMachineInfoServer
// for forward compatibility
type MachineInfoServer interface {
	GetMachineInfo(context.Context, *empty.Empty) (*GetMachineInfoResponse, error)
	mustEmbedUnimplementedMachineInfoServer()
}

// UnimplementedMachineInfoServer must be embedded to have forward compatible implementations.
type UnimplementedMachineInfoServer struct {
}

func (UnimplementedMachineInfoServer) GetMachineInfo(context.Context, *empty.Empty) (*GetMachineInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachineInfo not implemented")
}
func (UnimplementedMachineInfoServer) mustEmbedUnimplementedMachineInfoServer() {}

// UnsafeMachineInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MachineInfoServer will
// result in compilation errors.
type UnsafeMachineInfoServer interface {
	mustEmbedUnimplementedMachineInfoServer()
}

func RegisterMachineInfoServer(s grpc.ServiceRegistrar, srv MachineInfoServer) {
	s.RegisterService(&MachineInfo_ServiceDesc, srv)
}

func _MachineInfo_GetMachineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineInfoServer).GetMachineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/info.MachineInfo/GetMachineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineInfoServer).GetMachineInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MachineInfo_ServiceDesc is the grpc.ServiceDesc for MachineInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MachineInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "info.MachineInfo",
	HandlerType: (*MachineInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMachineInfo",
			Handler:    _MachineInfo_GetMachineInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "machine_info.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.3
// source: vm_threshold.proto

package threshold

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VMTHresholdClient is the client API for VMTHreshold service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMTHresholdClient interface {
	SetThreshold(ctx context.Context, in *SetThresholdRequest, opts ...grpc.CallOption) (*SetThresholdResponse, error)
}

type vMTHresholdClient struct {
	cc grpc.ClientConnInterface
}

func NewVMTHresholdClient(cc grpc.ClientConnInterface) VMTHresholdClient {
	return &vMTHresholdClient{cc}
}

func (c *vMTHresholdClient) SetThreshold(ctx context.Context, in *SetThresholdRequest, opts ...grpc.CallOption) (*SetThresholdResponse, error) {
	out := new(SetThresholdResponse)
	err := c.cc.Invoke(ctx, "/threshold.VMTHreshold/SetThreshold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMTHresholdServer is the server API for VMTHreshold service.
// All implementations must embed UnimplementedVMTHresholdServer
// for forward compatibility
type VMTHresholdServer interface {
	SetThreshold(context.Context, *SetThresholdRequest) (*SetThresholdResponse, error)
	mustEmbedUnimplementedVMTHresholdServer()
}

// UnimplementedVMTHresholdServer must be embedded to have forward compatible implementations.
type UnimplementedVMTHresholdServer struct {
}

func (UnimplementedVMTHresholdServer) SetThreshold(context.Context, *SetThresholdRequest) (*SetThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetThreshold not implemented")
}
func (UnimplementedVMTHresholdServer) mustEmbedUnimplementedVMTHresholdServer() {}

// UnsafeVMTHresholdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMTHresholdServer will
// result in compilation errors.
type UnsafeVMTHresholdServer interface {
	mustEmbedUnimplementedVMTHresholdServer()
}

func RegisterVMTHresholdServer(s grpc.ServiceRegistrar, srv VMTHresholdServer) {
	s.RegisterService(&VMTHreshold_ServiceDesc, srv)
}

func _VMTHreshold_SetThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetThresholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMTHresholdServer).SetThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threshold.VMTHreshold/SetThreshold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMTHresholdServer).SetThreshold(ctx, req.(*SetThresholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VMTHreshold_ServiceDesc is the grpc.ServiceDesc for VMTHreshold service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMTHreshold_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "threshold.VMTHreshold",
	HandlerType: (*VMTHresholdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetThreshold",
			Handler:    _VMTHreshold_SetThreshold_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vm_threshold.proto",
}

// RpcDomainThvClient is the client API for RpcDomainThv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcDomainThvClient interface {
	GetDomainThv(ctx context.Context, in *GetDomainThvRequest, opts ...grpc.CallOption) (*GetDomainThvResponse, error)
}

type rpcDomainThvClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcDomainThvClient(cc grpc.ClientConnInterface) RpcDomainThvClient {
	return &rpcDomainThvClient{cc}
}

func (c *rpcDomainThvClient) GetDomainThv(ctx context.Context, in *GetDomainThvRequest, opts ...grpc.CallOption) (*GetDomainThvResponse, error) {
	out := new(GetDomainThvResponse)
	err := c.cc.Invoke(ctx, "/threshold.RpcDomainThv/GetDomainThv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcDomainThvServer is the server API for RpcDomainThv service.
// All implementations must embed UnimplementedRpcDomainThvServer
// for forward compatibility
type RpcDomainThvServer interface {
	GetDomainThv(context.Context, *GetDomainThvRequest) (*GetDomainThvResponse, error)
	mustEmbedUnimplementedRpcDomainThvServer()
}

// UnimplementedRpcDomainThvServer must be embedded to have forward compatible implementations.
type UnimplementedRpcDomainThvServer struct {
}

func (UnimplementedRpcDomainThvServer) GetDomainThv(context.Context, *GetDomainThvRequest) (*GetDomainThvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainThv not implemented")
}
func (UnimplementedRpcDomainThvServer) mustEmbedUnimplementedRpcDomainThvServer() {}

// UnsafeRpcDomainThvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcDomainThvServer will
// result in compilation errors.
type UnsafeRpcDomainThvServer interface {
	mustEmbedUnimplementedRpcDomainThvServer()
}

func RegisterRpcDomainThvServer(s grpc.ServiceRegistrar, srv RpcDomainThvServer) {
	s.RegisterService(&RpcDomainThv_ServiceDesc, srv)
}

func _RpcDomainThv_GetDomainThv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainThvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDomainThvServer).GetDomainThv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threshold.RpcDomainThv/GetDomainThv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDomainThvServer).GetDomainThv(ctx, req.(*GetDomainThvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcDomainThv_ServiceDesc is the grpc.ServiceDesc for RpcDomainThv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcDomainThv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "threshold.RpcDomainThv",
	HandlerType: (*RpcDomainThvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDomainThv",
			Handler:    _RpcDomainThv_GetDomainThv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vm_threshold.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.3
// source: machine_info.proto

package info

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcMachineInfoClient is the client API for RpcMachineInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcMachineInfoClient interface {
	GetMachineInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetMachineInfoResponse, error)
}

type rpcMachineInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcMachineInfoClient(cc grpc.ClientConnInterface) RpcMachineInfoClient {
	return &rpcMachineInfoClient{cc}
}

func (c *rpcMachineInfoClient) GetMachineInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetMachineInfoResponse, error) {
	out := new(GetMachineInfoResponse)
	err := c.cc.Invoke(ctx, "/RpcMachineInfo/GetMachineInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcMachineInfoServer is the server API for RpcMachineInfo service.
// All implementations must embed UnimplementedRpcMachineInfoServer
// for forward compatibility
type RpcMachineInfoServer interface {
	GetMachineInfo(context.Context, *empty.Empty) (*GetMachineInfoResponse, error)
	mustEmbedUnimplementedRpcMachineInfoServer()
}

// UnimplementedRpcMachineInfoServer must be embedded to have forward compatible implementations.
type UnimplementedRpcMachineInfoServer struct {
}

func (UnimplementedRpcMachineInfoServer) GetMachineInfo(context.Context, *empty.Empty) (*GetMachineInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachineInfo not implemented")
}
func (UnimplementedRpcMachineInfoServer) mustEmbedUnimplementedRpcMachineInfoServer() {}

// UnsafeRpcMachineInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcMachineInfoServer will
// result in compilation errors.
type UnsafeRpcMachineInfoServer interface {
	mustEmbedUnimplementedRpcMachineInfoServer()
}

func RegisterRpcMachineInfoServer(s grpc.ServiceRegistrar, srv RpcMachineInfoServer) {
	s.RegisterService(&RpcMachineInfo_ServiceDesc, srv)
}

func _RpcMachineInfo_GetMachineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcMachineInfoServer).GetMachineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcMachineInfo/GetMachineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcMachineInfoServer).GetMachineInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcMachineInfo_ServiceDesc is the grpc.ServiceDesc for RpcMachineInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcMachineInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RpcMachineInfo",
	HandlerType: (*RpcMachineInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMachineInfo",
			Handler:    _RpcMachineInfo_GetMachineInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "machine_info.proto",
}
